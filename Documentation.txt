
-----------------------------------Packages Used-------------------------------------------------------------------------------
{
    BACKEND :
        "cors"      : "^2.8.5" ,    - for cross relation ports (alternative create proxy for frontend)
        "dotenv"    : "^16.5.0",    - for using "process.env" file
        "express"   : "^5.1.0" ,    - for API
        "mongodb"   : "^6.16.0",    - Database
        "mongoose"  : "^8.15.1",    - ORM
        "nodemon"   : "^3.1.10",    - for live server on backend
        "react"     : "^19.1.0",    - frontend (not used)
        "mailer"    : "^0.6.6" ,    - Mailing to students and faculties for update pov   
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-----------------------------------API Documentation of Venue Booking System--------------------------------------------------- 
{
    Manager : 
        GET     ->
            getVenue           - to get venues belonging to that particular manager
        POST    -> 
            createVenue         - to create venues
            solveConflicts      - solves out the conflict arrised by users on a particular venue (passed the level of "prioritiser")
        PATCH   -> 
            updateVenue         - update venue information that is added prior
        DELETE  ->
            deleteVenue         - to delete a particular venue using venue id

    Staff   :
        GET     ->
            getVenues       - gets venues related to user via booking (view bookings)
            getUserClassGroups  - gets the "classes of students" grouped by that user
            getAllVenues        - gets all venues for booking showcase
            form :
            getUrlForClassAddition - creates a url that would be like a google form , will be sent to everyone , filled forms will be validated and can be added to the db
            getFormValdity      - gets valdity of a form (true if can add , and false if its valid or not found)

        POST    ->
            riseBooking         - sends venue id and userid to book that venue (with details provided)   
            applyFilterToVenues - sends the filter data to the db of venues and filter it with that
            riseConflict        - user after pressing that can request venues of booked slots

        PATCH   ->
            updateBookings      - updates Amenities if added or class if changed(should include total update of that booking)
            updateUserClassGroups - updates user groups details (can adjust students)

        DELETE  ->
            deleteForm            - perform deletion of forms form
            cancelVenue           - cancels the venue that is previously booked
} 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



DEV FUNCTIONS:
    MailHandler :
        sendNotificationMail        - Sends notification to students
        

    

        